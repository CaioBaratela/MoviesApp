package movies.app.movies.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import movies.app.movies.dao.Movies;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIES".
*/
public class MoviesDao extends AbstractDao<Movies, String> {

    public static final String TABLENAME = "MOVIES";

    /**
     * Properties of entity Movies.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ImdbID = new Property(0, String.class, "imdbID", true, "IMDB_ID");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property Year = new Property(2, String.class, "Year", false, "YEAR");
        public final static Property Rated = new Property(3, String.class, "Rated", false, "RATED");
        public final static Property Released = new Property(4, String.class, "Released", false, "RELEASED");
        public final static Property Runtime = new Property(5, String.class, "Runtime", false, "RUNTIME");
        public final static Property Genre = new Property(6, String.class, "Genre", false, "GENRE");
        public final static Property Director = new Property(7, String.class, "Director", false, "DIRECTOR");
        public final static Property Actors = new Property(8, String.class, "Actors", false, "ACTORS");
        public final static Property Plot = new Property(9, String.class, "Plot", false, "PLOT");
        public final static Property Language = new Property(10, String.class, "Language", false, "LANGUAGE");
        public final static Property Awards = new Property(11, String.class, "Awards", false, "AWARDS");
        public final static Property Poster = new Property(12, String.class, "Poster", false, "POSTER");
        public final static Property MetaScore = new Property(13, String.class, "MetaScore", false, "META_SCORE");
        public final static Property ImdbRating = new Property(14, String.class, "imdbRating", false, "IMDB_RATING");
        public final static Property Type = new Property(15, String.class, "Type", false, "TYPE");
        public final static Property Writer = new Property(16, String.class, "Writer", false, "WRITER");
    };


    public MoviesDao(DaoConfig config) {
        super(config);
    }
    
    public MoviesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIES\" (" + //
                "\"IMDB_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: imdbID
                "\"TITLE\" TEXT," + // 1: Title
                "\"YEAR\" TEXT," + // 2: Year
                "\"RATED\" TEXT," + // 3: Rated
                "\"RELEASED\" TEXT," + // 4: Released
                "\"RUNTIME\" TEXT," + // 5: Runtime
                "\"GENRE\" TEXT," + // 6: Genre
                "\"DIRECTOR\" TEXT," + // 7: Director
                "\"ACTORS\" TEXT," + // 8: Actors
                "\"PLOT\" TEXT," + // 9: Plot
                "\"LANGUAGE\" TEXT," + // 10: Language
                "\"AWARDS\" TEXT," + // 11: Awards
                "\"POSTER\" TEXT," + // 12: Poster
                "\"META_SCORE\" TEXT," + // 13: MetaScore
                "\"IMDB_RATING\" TEXT," + // 14: imdbRating
                "\"TYPE\" TEXT," + // 15: Type
                "\"WRITER\" TEXT);"); // 16: Writer
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_MOVIES_IMDB_ID ON MOVIES" +
                " (\"IMDB_ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Movies entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getImdbID());
 
        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(2, Title);
        }
 
        String Year = entity.getYear();
        if (Year != null) {
            stmt.bindString(3, Year);
        }
 
        String Rated = entity.getRated();
        if (Rated != null) {
            stmt.bindString(4, Rated);
        }
 
        String Released = entity.getReleased();
        if (Released != null) {
            stmt.bindString(5, Released);
        }
 
        String Runtime = entity.getRuntime();
        if (Runtime != null) {
            stmt.bindString(6, Runtime);
        }
 
        String Genre = entity.getGenre();
        if (Genre != null) {
            stmt.bindString(7, Genre);
        }
 
        String Director = entity.getDirector();
        if (Director != null) {
            stmt.bindString(8, Director);
        }
 
        String Actors = entity.getActors();
        if (Actors != null) {
            stmt.bindString(9, Actors);
        }
 
        String Plot = entity.getPlot();
        if (Plot != null) {
            stmt.bindString(10, Plot);
        }
 
        String Language = entity.getLanguage();
        if (Language != null) {
            stmt.bindString(11, Language);
        }
 
        String Awards = entity.getAwards();
        if (Awards != null) {
            stmt.bindString(12, Awards);
        }
 
        String Poster = entity.getPoster();
        if (Poster != null) {
            stmt.bindString(13, Poster);
        }
 
        String MetaScore = entity.getMetaScore();
        if (MetaScore != null) {
            stmt.bindString(14, MetaScore);
        }
 
        String imdbRating = entity.getImdbRating();
        if (imdbRating != null) {
            stmt.bindString(15, imdbRating);
        }
 
        String Type = entity.getType();
        if (Type != null) {
            stmt.bindString(16, Type);
        }
 
        String Writer = entity.getWriter();
        if (Writer != null) {
            stmt.bindString(17, Writer);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Movies readEntity(Cursor cursor, int offset) {
        Movies entity = new Movies( //
            cursor.getString(offset + 0), // imdbID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Year
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Rated
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Released
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Runtime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Genre
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Director
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Actors
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Plot
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Language
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Awards
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Poster
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // MetaScore
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // imdbRating
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Type
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // Writer
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Movies entity, int offset) {
        entity.setImdbID(cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYear(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRated(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReleased(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRuntime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGenre(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDirector(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setActors(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlot(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLanguage(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAwards(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPoster(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMetaScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImdbRating(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setType(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setWriter(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Movies entity, long rowId) {
        return entity.getImdbID();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Movies entity) {
        if(entity != null) {
            return entity.getImdbID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
